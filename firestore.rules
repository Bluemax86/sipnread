
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Profiles:
    // - Authenticated users can read and update their own profile.
    // - Authenticated users can create their own profile document.
    // - Tassologists can read all user profiles and update any profile.
    match /profiles/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'tassologist');
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'tassologist');
      // Deny delete by default unless explicitly needed
      allow delete: if false;
    }

    // Readings (AI-generated ones, potentially with user's manual additions later):
    // - Authenticated users can manage (create, read, update) their own readings.
    // - Tassologists can read any reading (e.g., if linked to a personalized request).
    match /readings/{readingId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'tassologist');
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'tassologist');
      // Deny delete by default unless explicitly needed
      allow delete: if false;
    }

    // PersonalizedReadings (Roxy's requests):
    // - Authenticated users can manage their own requests.
    // - Tassologists can manage any request (read, update for processing).
    match /personalizedReadings/{requestId} {
      allow read, update: if request.auth != null && (resource.data.userId == request.auth.uid || resource.data.tassologistId == request.auth.uid || get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'tassologist');
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Deny delete by default unless explicitly needed
      allow delete: if false;
    }

    // appTiles:
    // - Publicly readable by anyone (for the Gateway page).
    // - Not writable by clients (should be managed via Firebase console or admin SDK).
    match /appTiles/{tileId} {
      allow read: if true;
      allow create, update, delete: if false; // Or restrict to admin/specific role if needed
    }

    // audioTracks:
    // - Publicly readable by anyone (for fetching audio URLs for UI).
    // - Not writable by clients (should be managed via Firebase console or admin SDK).
    match /audioTracks/{trackType} {
      allow read: if true;
      allow create, update, delete: if false;
    }
    
    // Mail collection for sending emails (Triggered by Firebase Extension: Trigger Email)
    // - Only allow creates by authenticated users (or specific server-side logic if using Admin SDK).
    // - Deny reads, updates, deletes from client-side.
    match /mail/{mailId} {
      allow read, update, delete: if false;
      allow create: if request.auth != null; // Or more restrictive if needed
    }

    // Default deny all other paths if not explicitly matched above
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
